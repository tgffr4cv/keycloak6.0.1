#!/usr/bin/python
# Copyright (c) 2011, Red Hat, Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Red Hat nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Alexander Kurtakov <akurtako@redhat.com>

import sys
import os.path
import zipfile
from zipfile import ZipFile

class OsgiProvideInfo:

    symbolicName = None
    version = None

    def setSymbolicName(self, content):
        self.symbolicName = content.split(";")[0].strip()

    def setVersion(self, content):
        versions = content.split('.')[0:3]
        self.version = ".".join(versions)

    def printProvide(self):
        if self.version and self.symbolicName:
            print "osgi(%s) = %s" %(self.symbolicName, self.version)

class TagBuilder:

    def __init__ (self, filelist=None):
        if filelist == None:
            filelist = sys.stdin
        paths = map (lambda x: x.rstrip (), filelist.readlines ())
        for path in paths:
	        self.get_osgi_provide (path)

    def normalize_manifest(self, manifest):
        lines = []
        for line in manifest.readlines():
            if line.startswith(' '):
                lines[-1] += line.strip()
            else:
                lines.append(line.strip())
        return lines

    def handle_manifest(self, manifest):
        provideInfo = OsgiProvideInfo()
        for line in self.normalize_manifest(manifest):
            if line.startswith("Bundle-SymbolicName:"):
                provideInfo.setSymbolicName(line.split(':')[1].strip())
            if line.startswith("Bundle-Version:"):
                provideInfo.setVersion(line.split(':')[1].strip())

        provideInfo.printProvide()

    def get_osgi_provide (self, path):
        if not os.path.islink(path):
            if path.endswith("META-INF/MANIFEST.MF"):
                manifest = open(path)
                self.handle_manifest(manifest)
            if zipfile.is_zipfile(path):
                jarfile = ZipFile(path)
                if "META-INF/MANIFEST.MF" in jarfile.namelist():
                    manifest = jarfile.open("META-INF/MANIFEST.MF")
                    self.handle_manifest(manifest)


if __name__ == "__main__":
    builder = TagBuilder ()
