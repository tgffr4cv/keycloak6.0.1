#!/usr/bin/python
# Copyright (c) 2012, Red Hat, Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Red Hat nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Alexander Kurtakov <akurtako@redhat.com>
#          Stanislav Ochotnicky <sochotnicky@redhat.com>

import os
import signal
import sys
import traceback
from javapackages import Depmap, Artifact

class TagBuilder:
    def __init__ (self, filelist=None):
        if filelist == None:
            filelist = sys.stdin
        paths = map (lambda x: x.rstrip (), filelist.readlines ())
        for path in paths:
            depmap = Depmap(path)

            for m_artifact, l_artifact in depmap.get_provided_mappings():
                prov_artifact = m_artifact
                if l_artifact.version:
                    prov_artifact = Artifact(m_artifact.groupId,
                                             m_artifact.artifactId,
                                             extension=m_artifact.extension,
                                             classifier=m_artifact.classifier,
                                             version=l_artifact.version,
                                             namespace=l_artifact.namespace)
                if prov_artifact.extension == 'jar':
                    prov_artifact.extension = ''

                print("{rpmstr} = {version}".format(
                        rpmstr=prov_artifact.get_rpm_str(depmap.is_compat()),
                        version=m_artifact.version ))
                # preserve compatibility and generate simple mvn(g:a) provides
                # for pom artifacts
                ns = l_artifact.namespace
                if prov_artifact.extension == 'pom':
                    print("{ns}mvn({gid}:{aid}) = {version}".format(
                            ns=(ns + "-") if ns else "",
                            gid=prov_artifact.groupId,
                            aid=prov_artifact.artifactId,
                            version=m_artifact.version))


if __name__ == "__main__":
    try:
        builder = TagBuilder ()
    except Exception, e:
        traceback.print_exc(file=sys.stderr)
        sys.stderr.write(str(e))
        # rpmbuild ignores non-zero exit codes but this that is bad. Make sure
        # the build fails and doesn't silently ignore problems
        os.kill(os.getppid(), signal.SIGKILL)
